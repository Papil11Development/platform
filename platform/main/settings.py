"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import base64
import os
import json
from datetime import datetime
from pathlib import Path
from datetime import timedelta
from dateutil.relativedelta import relativedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from urllib.parse import quote

import pytz

BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e#ergz2smm@velg8=4l%i^5=a^_+0al1&=e2aqkh!8%k=goa5p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = json.loads(os.environ.get('DEBUG', "False").lower())

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [os.environ.get('TRUSTED_ORIGIN')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'strawberry.django',
    'django_celery_beat',
    'django_json_widget',
    'user_domain',
    'api_gateway',
    'collector_domain',
    'data_domain',
    'label_domain',
    'notification_domain',
    'person_domain',
    'activation_manager',
    'channels',
    'django_inlinecss',
    'licensing',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'
ASGI_APPLICATION = 'main.asgi.application'


LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)
LOG_LEVEL = 'INFO' if DEBUG else 'ERROR'  # only log errors in production
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} [{module} {funcName} {lineno}] {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        }
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR + '/django.log',
            'formatter': 'verbose'
        },
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'stripe_file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR + '/stripe.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        '': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True
        },
        'licensing.tasks': {
            'handlers': ['stripe_file', 'console'],
            'level': 'INFO',
            'propagate': False
        }
    }
}


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'platform_db'),
        'USER': os.environ.get('POSTGRES_USER', 'platform_user'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'zaq11qaz'),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'user_domain.password_validation.MaximumLengthValidator',
        'OPTIONS': {
            'max_length': 150,
        }
    }
]


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.AllowAllUsersModelBackend'
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'storage/static/')
STATIC_URL = '/storage/static/'

# Activation parameters
DEFAULT_UPDATE_TIMEOUT = 3600  # seconds
DEFAULT_OFFLINE_TIMEOUT = int(os.environ.get('DEFAULT_OFFLINE_TIMEOUT', 43200))  # seconds
ACTIVATION_MAX_TIME_DIFFERENCE = 600  # seconds
ACTIVATION_LICENSE_NAME = os.environ.get("ACTIVATION_LICENSE_NAME")

LICENSE_SIGNATURE_TOOL = os.path.join('activation_manager/signature_tool/license_signature_tool')

PUBLIC_KEY_RESPONSE = os.environ.get(
    'PUBLIC_KEY_RESPONSE', os.path.join('activation_manager/signature_tool/keys/public_response.txt'))
PUBLIC_KEY_REQUEST = os.environ.get(
    'PUBLIC_KEY_REQUEST', os.path.join('activation_manager/signature_tool/keys/public_request.txt'))
PRIVATE_KEY_RESPONSE = os.environ.get(
    'PRIVATE_KEY_RESPONSE', os.path.join('activation_manager/signature_tool/keys/private_response.txt'))
PRIVATE_KEY_REQUEST = os.environ.get(
    'PRIVATE_KEY_REQUEST', os.path.join('activation_manager/signature_tool/keys/private_request.txt'))


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Agents Links
AGENT_DOWNLOAD_URL_V1 = {
    'linux_x64': os.environ.get(
        'AGENT_DOWNLOAD_URL_V1_LINUX_X64'),
    'windows_x64': os.environ.get(
        'AGENT_DOWNLOAD_URL_V1_WINDOWS_x64')
}

AGENT_DOWNLOAD_URL_V2 = {
    'linux_x64': os.environ.get(
        'AGENT_DOWNLOAD_URL_V2_LINUX_X64'),
    'windows_x64': os.environ.get(
        'AGENT_DOWNLOAD_URL_V2_WINDOWS_x64')
}

# Authenticate via license server
LICENSE_SERVER_URL = os.environ.get('LICENSE_SERVER_URL', 'http://localhost')
EXTERNAL_AUTH_URL = f'{LICENSE_SERVER_URL}/api/service/authenticate/'
LICENSING_PRODUCT_NAME = os.environ.get('LICENSING_PRODUCT_NAME')

# LS Links
DETAIL_CARD = f'{LICENSE_SERVER_URL}/sso-auth/?service={LICENSING_PRODUCT_NAME}&workspace_id={{}}'
CHECKOUT_UPGRADE = f'{LICENSE_SERVER_URL}/sso-auth/?service={LICENSING_PRODUCT_NAME}&workspace_id={{}}&upgrade='

# ELK stack
ELK_URL_INT = os.environ.get('ELK_URL_INT', 'http://192.168.45.59')
ELASTIC_PORT_INT = os.environ.get('ELASTIC_PORT_INT', 9200)
ELASTIC_URL_INT = f'{ELK_URL_INT}:{ELASTIC_PORT_INT}'
AUTH_TYPE_INT = 'ApiKey'
AUTH_KEY_INT = os.environ.get('ELASTIC_API_KEY_INT')
ELASTIC_HEADERS_INT = {'Content-Type': 'application/json', 'kbn-xsrf': 'true',
                       'Authorization': f'{AUTH_TYPE_INT} {AUTH_KEY_INT}'}


ELASTIC_SCHEME = 'https' if os.environ.get('IS_ELASTIC_HTTPS') else 'http'
KIBANA_SCHEME = 'https' if os.environ.get('IS_KIBANA_HTTPS') else 'http'

ELASTIC_HOST_EXT = os.environ.get('ELASTIC_HOST_EXT', "192.168.45.59")
ELASTIC_PORT_EXT = os.environ.get('ELASTIC_PORT_EXT', 9200)
ELASTIC_URL_EXT = f'{ELASTIC_SCHEME}://{ELASTIC_HOST_EXT}:{ELASTIC_PORT_EXT}'

KIBANA_HOST_EXT = os.environ.get('KIBANA_HOST_EXT', "192.168.45.59")
KIBANA_PORT_EXT = os.environ.get('KIBANA_PORT_EXT', 5601)
KIBANA_URL_EXT = f'{KIBANA_SCHEME}://{KIBANA_HOST_EXT}:{KIBANA_PORT_EXT}'

PUBLIC_KIBANA_HOST = os.environ.get('PUBLIC_KIBANA_HOST', "192.168.45.59")
PUBLIC_KIBANA_PORT = os.environ.get('PUBLIC_KIBANA_PORT', 5601)
PUBLIC_KIBANA_URL = f'{KIBANA_SCHEME}://{PUBLIC_KIBANA_HOST}:{PUBLIC_KIBANA_PORT}'

AUTH_TYPE_EXT = 'ApiKey' if os.environ.get('ELASTIC_API_KEY_EXT') else 'Basic'
AUTH_KEY_EXT = os.environ.get('ELASTIC_API_KEY_EXT') or \
               base64.b64encode(
                   f"{os.environ.get('ELASTIC_USER')}:{os.environ.get('ELASTIC_PASSWORD')}".encode('ascii')
               ).decode('utf-8')
ELASTIC_HEADERS_EXT = {'Content-Type': 'application/json', 'kbn-xsrf': 'true',
                       'Authorization': f'{AUTH_TYPE_EXT} {AUTH_KEY_EXT}'}


DEFAULT_TEMPLATES_VERSION = os.environ.get('DEFAULT_TEMPLATES_VERSION', "template10v100")
DEFAULT_FAR_THRESHOLD_VALUE = os.environ.get('DEFAULT_FAR_THRESHOLD_VALUE', 1e-6)
DEFAULT_SCORE_THRESHOLD_VALUE = os.environ.get('DEFAULT_SCORE_THRESHOLD_VALUE', 0.85)
# thresholds were selected by eye: https://www.desmos.com/calculator/kp9rifevzx
MATCHRESULT_BEST_QUALITY_THRESHOLD = os.environ.get('BEST_QUALITY_THRESHOLD', -750.)
MATCHRESULT_PASS_QUALITY_THRESHOLD = os.environ.get('PASS_QUALITY_THRESHOLD', -900.)

MATCHER_SERVICE_HOST = os.environ.get('MATCHER_SERVICE_HOST', 'localhost')
MATCHER_SERVICE_PORT = os.environ.get('MATCHER_SERVICE_PORT', 5001)
MATCHER_SERVICE_URL = f"http://{MATCHER_SERVICE_HOST}:{MATCHER_SERVICE_PORT}"

MATCHER_SERVICE_V2_HOST = os.environ.get('MATCHER_SERVICE_V2_HOST', 'localhost')
MATCHER_SERVICE_V2_PORT = os.environ.get('MATCHER_SERVICE_V2_PORT', 5001)
MATCHER_SERVICE_V2_URL = f"http://{MATCHER_SERVICE_V2_HOST}:{MATCHER_SERVICE_V2_PORT}"

IMAGE_API_SERVICE_HOST = os.environ.get('IMAGE_API_SERVICE_HOST', 'localhost')
IMAGE_API_SERVICE_PORT = os.environ.get('IMAGE_API_SERVICE_PORT', 8000)
IMAGE_API_URL = f'http://{IMAGE_API_SERVICE_HOST}:{IMAGE_API_SERVICE_PORT}'

QUALITY_SERVICE_HOST = os.environ.get('QUALITY_SERVICE_HOST', '0.0.0.0')
QUALITY_SERVICE_PORT = os.environ.get('QUALITY_SERVICE_PORT', 5005)
QUALITY_SERVICE_URL = f"http://{QUALITY_SERVICE_HOST}:{QUALITY_SERVICE_PORT}"

PROCESSING_SERVICE_HOST = os.environ.get('PROCESSING_SERVICE_HOST', 'localhost')
PROCESSING_SERVICE_PORT = os.environ.get('PROCESSING_SERVICE_PORT', 5000)
PROCESSING_SERVICE_URL = f"http://{PROCESSING_SERVICE_HOST}:{PROCESSING_SERVICE_PORT}"
PROCESSING_SERVICE_CAPTURER = os.environ.get('PROCESSING_SERVICE_CAPTURER', '')

SERVICE_KEY = os.environ.get("SERVICE_KEY", "1q2w3e4r")

# QA group
QA_GROUP = 'QA'
STANDALONE_GROUP = 'standalone'
TS_GROUP = 'test_clock'
DEFAULT_QA_USER = os.environ.get('DEFAULT_QA_USER', 'test@mail.com')
DEFAULT_QA_PASSWORD = os.environ.get('DEFAULT_QA_PASSWORD', 'zaq11qaz')

BROKER_USER = os.environ.get('BROKER_USER', 'admin')
BROKER_PASSWORD = os.environ.get('BROKER_PASSWORD', 'zaq11qaz')
BROKER_HOST = os.environ.get('BROKER_HOST', 'localhost')
BROKER_PORT = os.environ.get('BROKER_PORT', '5672')

CELERY_BROKER_URL = f"amqp://{BROKER_USER}:{BROKER_PASSWORD}@{BROKER_HOST}:{BROKER_PORT}"


CACHE_HOST = os.environ.get('CACHE_SERVICE', 'localhost')
CACHE_PORT = os.environ.get('CACHE_PORT', '11211')


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': f'{CACHE_HOST}:{CACHE_PORT}',
    }
}

REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.environ.get('REDIS_PORT', 6379)

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

AGENT_INACTIVE_PERIOD_SECONDS = 60

DEFAULT_PROFILE_LABEL_TITLES = ['Staff', 'VIP', 'Shoplifter']

SAMPLE_BOARD_ADVERTISING = os.environ.get('SAMPLE_BOARD_ADVERTISING')
SAMPLE_BOARD_RETAIL = os.environ.get('SAMPLE_BOARD_RETAIL')
SAMPLE_BOARD = {
    'retail_analytics': SAMPLE_BOARD_RETAIL,
    'advertising_analytics': SAMPLE_BOARD_ADVERTISING
}

DASHBOARDS_TITLES_MAP = {
    'retail_analytics': 'Retail Dashboard',
    'advertising_analytics': 'Advertising Dashboard'
}

SAMPLE_BOARD_JSON_PATH = os.path.join(BASE_DIR, 'user_domain/api/elk_data/sample_board.json')
INDEX_PATTERN_JSON_PATH = os.path.join(BASE_DIR, 'user_domain/api/elk_data/index_pattern.json')
MAPPING_JSON_PATH = os.path.join(BASE_DIR, 'user_domain/api/elk_data/mapping.json')

ELASTIC_UNLOCK_RESPONSE_SIZE = 2147483647

DATA_UPLOAD_MAX_MEMORY_SIZE = 8388608  # 8 Mb
MAX_IMAGE_WIDTH = int(os.environ.get('MAX_IMAGE_WIDTH', 4032))
MAX_IMAGE_HEIGHT = int(os.environ.get('MAX_IMAGE_HEIGHT', 4032))
BATCH_SIZE = int(os.environ.get('BATCH_SIZE', 1000))
PRODUCT_VERSION = os.environ.get('PRODUCT_VERSION', 'stag')

# CELERY
TRIGGERS_HANDLER_PERIOD = int(os.environ.get('TRIGGERS_HANDLER_PERIOD', 5))
PUSH_TO_ELASTIC_PERIOD = int(os.environ.get('PUSH_TO_ELASTIC_PERIOD', 60))
AGENT_STATUS_CHECK_PERIOD = int(os.environ.get('AGENT_STATUS_CHECK_PERIOD', 30))

COLLECTOR_QUEUE = os.environ.get('COLLECTOR_QUEUE', 'elastic-queue')
ELASTIC_QUEUE = os.environ.get('ELASTIC_QUEUE', 'elastic-queue')
ELASTIC_MANAGER_QUEUE = os.environ.get('ELASTIC_MANAGER_QUEUE', 'elastic-manager-queue')
NOTIFICATIONS_QUEUE = os.environ.get('NOTIFICATIONS_QUEUE', 'notification-queue')
REIDENTIFICATION_QUEUE = os.environ.get('REIDENTIFICATION_QUEUE', 'reidentification-queue')
SIGNUP_QUEUE = os.environ.get('SIGNUP_QUEUE', 'signup-queue')
LICENSING_QUEUE = os.environ.get('LICENSING_QUEUE', 'licensing-queue')
NOTIFICATION_SENDER_QUEUE = os.environ.get('NOTIFICATION_SENDER_QUEUE', 'send-notification-queue')
QA_QUEUE = os.environ.get('QA_QUEUE', 'qa-queue')
DATA_PURGE_QUEUE = os.environ.get('DATA_PURGE_QUEUE', 'data-purge-queue')

# ON PREMISE
IS_ON_PREMISE = os.environ.get('IS_ON_PREMISE')

if not IS_ON_PREMISE:
    AUTHENTICATION_BACKENDS.append('api_gateway.auth_backends.LicenseServerAuth')

# Pluggable features
ENABLE_ELK = bool(os.environ.get('ENABLE_ELK'))
ENABLE_PROFILE_AUTOGENERATION = bool(os.environ.get('ENABLE_PROFILE_AUTOGENERATION'))

LIC_PRODUCT_ID = ''  # to pass mypy validation
LIC_SERVER_URL = ''  # to pass mypy validation
if IS_ON_PREMISE:
    LIC_PRODUCT_ID = os.environ['LIC_PRODUCT_ID']
    LIC_SERVER_URL = os.environ['LIC_SERVER_URL']

BASE_SITE_URL = os.environ.get('BASE_SITE_URL', 'http://localhost')
RESET_PASSWORD_URL = f'{BASE_SITE_URL}/password-recovery/new/?userId={{user_id}}&confirmationToken=' \
                     f'{{confirmation_token}}'
CONFIRM_URL = f'{BASE_SITE_URL}/email-confirm/success/?userId={{user_id}}&confirmationToken={{confirmation_token}}'

EMAIL_FROM = os.environ.get('EMAIL_FROM')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT', 1025)
EMAIL_PORT = int(EMAIL_PORT) if EMAIL_PORT else EMAIL_PORT
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PRODUCT_NAME = os.environ.get('CONTACT_PRODUCT_NAME')

EMAIL_USE_SSL = json.loads(os.environ.get('EMAIL_USE_SSL', "False").lower())
EMAIL_USE_TLS = json.loads(os.environ.get('EMAIL_USE_TLS', "False").lower())


USAGE_SEND_TIMEOUT = float(os.environ.get('USAGE_SEND_TIMEOUT', 1e-10))
EMAIL_CONTEXT = {
    'company_domain': os.environ.get('COMPANY_DOMAIN'),
    'company_short_name': os.environ.get('COMPANY_SHORT_NAME'),
    'company_full_name': os.environ.get('COMPANY_FULL_NAME'),
    'company_praise': os.environ.get('EMAIL_COMPANY_PRAISE'),
    'company_address': os.environ.get('EMAIL_COMPANY_ADDRESS'),
    'company_logo_path': os.environ.get('EMAIL_LOGO_PATH'),
    'current_year': str(datetime.now(pytz.UTC).year),
    'mail_to': quote(os.environ.get('EMAIL_MAIL_TO', 'support@example.com')),
    'team_name': os.environ.get('CONTACT_NAME'),
    'facebook_url': os.environ.get('EMAIL_FACEBOOK_URL'),
    'twitter_url': os.environ.get('EMAIL_TWITTER_URL'),
    'linkedin_url': os.environ.get('EMAIL_LINKEDIN_URL'),
    'instagram_url': os.environ.get('EMAIL_INSTAGRAM_URL'),
    'youtube_url': os.environ.get('EMAIL_YOUTUBE_URL'),
}

HTTP_REQUEST_TIMEOUT = int(os.environ.get('HTTP_REQUEST_TIMEOUT', 30))

# STRIPE
STRIPE_TEST_TOKEN = os.environ.get('STRIPE_TEST_TOKEN', '')
STRIPE_TEST_PUBLIC_TOKEN = os.environ.get('STRIPE_TEST_PUBLIC_TOKEN', '')
STRIPE_TEST_WEBHOOK_SECRET = os.environ.get('STRIPE_TEST_WEBHOOK_SECRET', '')

STRIPE_LIVE_TOKEN = os.environ.get('STRIPE_LIVE_TOKEN', '')
STRIPE_LIVE_PUBLIC_TOKEN = os.environ.get('STRIPE_LIVE_PUBLIC_TOKEN', '')
STRIPE_LIVE_WEBHOOK_SECRET = os.environ.get('STRIPE_LIVE_WEBHOOK_SECRET', '')

STRIPE_API_VERSION = os.environ.get('STRIPE_API_VERSION')
PAYMENT_MODE = os.environ.get('PAYMENT_MODE', 'test')

WORKSPACE_CLEANING_DELTA = os.environ.get('WORKSPACE_CLEANING_DELTA')

WORKSPACE_CLEANING_DELTA = timedelta(seconds=int(WORKSPACE_CLEANING_DELTA)) if \
    WORKSPACE_CLEANING_DELTA else relativedelta(months=1)

# Default values
SAMPLE_TTL = int(os.environ.get('SAMPLE_TTL', 2592000))  # in seconds
QUERY_LIMIT = int(os.environ.get('QUERY_LIMIT', 100))

SERVICE_TIMEOUT = int(os.environ.get('SERVICE_TIMEOUT', 10))  # in seconds
